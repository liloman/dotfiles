set number
set smartindent
set tabstop=4
set shiftwidth=4
set expandtab
"Set the historical logs of vim a proper dir
set undodir=~/.vim/undodir
set undofile 
set laststatus=2
"To change the buffer without saving it
set hidden
if !has('gui_running')
    set t_Co=256
endif

"Pathogen
call pathogen#infect() 
call pathogen#helptags()

let mapleader=" "
let g:lightline = {'colorscheme': 'wombat',}
filetype plugin indent on
colorscheme Monokai


nnoremap <F5> :GundoToggle<CR>
"To group with ease from the command line
cmap ;\ \(\)<Left><Left>
nmap <Leader>e :!./%<cr>
nmap <F3> :NERDTreeToggle<CR>
nmap <F4> :TagbarToggle<CR>
"Save with C-S
nmap <c-s> :update<CR>
vmap <c-s> <Esc><c-s>gv
imap <c-s> <Esc><c-s>

" Enable built-in matchit plugin
runtime macros/matchit.vim
"nmap <Leader>m :clear && make <cr>
nmap <Leader>m :make <cr>
nmap <Leader>r :!./run.sh <cr>
nmap <Leader>d :!./run.sh debug <cr>

" to change the macro storage location use the following
let marvim_store='/home/charly/.vim/.macros'
let marvim_find_key = '<Leader>1' " busca macro Space+F2
let marvim_store_key = '<Leader>0'     " guardar macro Space+F3 
let marvim_register = 'c'       " change used register from 'q' to 'c'
let marvim_prefix = 1           " disable default syntax based prefix 

" Move between buffers
nmap <Leader>l :bnext<CR>
nmap <Leader>h :bprevious<CR>
nmap <Leader>k :b#<CR>
nmap <Leader>j :blast<CR>
" Delete current buffer without delete window
nmap <leader>b :bn\|bd#<CR>

" Autofocus en tagbar
let g:tagbar_autofocus = 1

"Para que funcione gf en ficheros en otras rutas
set path=.,include/,src/ ",** no recursivo.--> :tag nombrefile.c

"Undo en insert mode 
inoremap <silent> <C-W> <C-\><C-O>db
inoremap <silent> <C-U> <C-\><C-O>d0
"Paste what you've deleted in insert mode
inoremap <silent> <C-Y> <C-R>" 

"Easymotion power
let g:EasyMotion_smartcase=1
map <Leader><Leader>l <Plug>(easymotion-lineforward)
map <Leader><Leader>j <Plug>(easymotion-j)
map <Leader><Leader>k <Plug>(easymotion-k)
map <Leader><Leader>h <Plug>(easymotion-linebackward)
map  / <Plug>(easymotion-sn)
omap / <Plug>(easymotion-tn)
"Ultimate snipper
let g:UltiSnipsExpandTrigger="<tab>"
let g:UltiSnipsJumpForwardTrigger="<tab>"
let g:UltiSnipsJumpBackwardTrigger="<s-tab>"
let g:UltiSnipsListSnippets="<tab><tab>"
