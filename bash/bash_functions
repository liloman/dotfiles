# vim: set filetype=sh :
# My bash functions
# Copyright © 2015 liloman
#
# This library is free software; you can redistribute it and/or modify
# it under the terms of the GNU Lesser General Public License as published
# by the Free Software Foundation; either version 3 of the License, or
# (at your option) any later version.
#
# This library is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU Lesser General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public License
# along with this library; if not, see <http://www.gnu.org/licenses/>.

######################
#  Dir stack prompt  #
######################

#Insert into dir stack checking repetitions
_add_dir_stack () { 
    local dir="$(realpath -P "${2:-"."}" 2>/dev/null)"
    [[ -d $dir ]] || { echo "Dir $dir not found";return;}
    # If executed _del_dir_stack and keep working in it...
    [[ $1 == false && $_DIR_STACK_LDIR == $dir ]] && return
    _DIR_STACK_LDIR="$dir"
    #Check exclusions
    IFS=":"; excl=($DIRSTACK_EXCLUDE); unset IFS
    for elem in "${excl[@]}"; do [[ $elem = $dir ]]&& return; done
    #Check duplicates
    readarray -t dup <<<"$(dirs -p -l 2>/dev/null)"
    #First entry (0) is always $PWD
    dup=${dup[@]:1}
    for elem in "${dup[@]}"; do [[ $elem = $dir ]]&& return; done
    #Check limit
    (( ${#dup[@]} > $DIRSTACK_LIMIT )) && _del_dir_stack $DIRSTACK_LIMIT silent
    pushd -n "${dir}" >/dev/null; 
}


#Delete dir stack whithout changing dir
_del_dir_stack () { 
    #Get dir 1 by default
    local num=${1:-1}
    (( $num == 0 )) && num=-1
    local dest="$(dirs -l +$num 2>/dev/null)"
    #Empty dir stack, out of range dir index or index=0
    [[ $dest ]] || { echo "Incorrect dir stack index or empty stack";return;}
    # check if you want to delete current dir actually (no args)
    [[ ! $1  &&  $PWD != $dest ]] && return
    popd -n +$num >/dev/null
    (( $? == 0 )) && [[ ! $2 ]] && echo Deleted "$dest" from dir stack
}

#Go to a dir stack number. 
_go_dir_stack () { 
    #Get absolute path
    local dir="$(dirs -l +$1 2>/dev/null)"
    [[ $dir ]] || { echo "Incorrect dir stack index or empty stack";return;}
    cd "$dir" && echo Changed dir to "$dir"
}

#Less control over errors
# _go_dir_stack () { eval cd "~$1" && echo Changed dir to "${PWD}"; }

#Show the dir stack below the bash prompt
function _list_dir_stack {
[ "${DIRSTACK_ENABLED}" != true ] && return
_add_dir_stack false "$(pwd -P)"
local i=0 
local com="dirs -p"
#Must use IFS= to not remove trailing whitespaces by process substitution
while IFS= read -r line; do 
    (( $i > 0 )) && echo -ne "\e[00;33m [\e[00m$i-$line\e[00;33m]\e[00m";
    let i++
done < <($com)
if (( $i == 1 )); then 
    echo -ne "\e[00;33mEmpty dir stack(a add,d delete,g go number,~num alias) \e[00m";
fi
    #Use $'string' expansion to get a newline without new characters printed
    echo -n $'\n\r'
}


if [ "${DIRSTACK_ENABLED}" == true ]; then
    [ -v DIRSTACK_LIMIT ] || echo DIRSTACK_LIMIT must be a number
    [ -v DIRSTACK_EXCLUDE ] || echo DIRSTACK_EXCLUDE must be a string
    alias a="_add_dir_stack true"
    alias d=_del_dir_stack
    alias g=_go_dir_stack
fi


###########
# General #
###########

# Show the last command exit value in PROMPT_COMMAND 
function _exitbash {
    local last="$?" # Must come first
    [ "${last}" -eq 0 ] && echo -ne "\e[01;38m" ||  echo -en "\e[01;31m"
    echo -en "($last)\e[00m "
}


#Show the size of something
#maybe rework with tree or alike
tam () { du -hs "$@" | sort -h; }

#############
#  Desktop  #
#############

#Alternate between on/off states of a VM
function alternateVBox {
local machine="$1"
local saved="$2"
#Not Greedy state
local regex='(State:)([[:space:]]*)([-[:alnum:][:space:]]*)([[:space:]].*)'

#Get the VM info
readarray -t info <<< "$(VBoxManage showvminfo "$machine")" 
#Search regex onto full array
[[ ${info[@]} =~ ${regex} ]] || return 

local state="${BASH_REMATCH[3]}"
echo $machine State was:"\"$state\""

[ "$state" == "paused" ] && VBoxManage controlvm "$machine" resume 
[[ "$state" = "saved" || "$state" = "powered off"  ]] && VBoxManage startvm "$machine" --type headless

if [ "$state" == "running" ]; then
    [ "$saved" ] &&  VBoxManage controlvm "$machine" savestate && return
    VBoxManage controlvm "$machine" pause
fi
}


#Download vid and play it in FS from bash or vimperator or whatever
function descarga {
local dest=~/Descargas/videoFlash
local url="$1"
killall -q youtube-dl
cd ~ # youtube-dl doesn't get DEST right ¿?
rm "$dest"
#My temporal local latest version of youtube-dl for rtve
[ -e "~/Scripts/youtube-dl" ] && wget https://yt-dl.org/latest/youtube-dl -O ~/Scripts/youtube-dl
~/Scripts/youtube-dl "$url" --verbose -o "$dest" -f best --no-part >/tmp/youtube.log &
sleep 4 
mplayer -fs "$dest" 
}


#Download and install the current extension pack for virtualbox 
function virtualboxGetExtensionPack() {
local version=$(VBoxManage --version)
local ver=${version:0:6}
local base="http://download.virtualbox.org/virtualbox"
local pkg="Oracle_VM_VirtualBox_Extension_Pack-$ver-${version: -6}.vbox-extpack"
local url="$base/$ver/$pkg"
cd /tmp/
wget "$url" || { echo "URL:$url not found"; return; }
echo Downloaded /tmp/"$pkg" 
VBoxManage extpack install /tmp/"$pkg"
VBoxManage list extpacks
}

#Sync & set firefox profile between RAM and non-voltatile storage
function firefox_sync() {
hash rsync || { echo rsync must be installed!; return; }
#Firefox home
local firhome="$HOME/.mozilla/firefox"
#Firefox default profile
local profile=($firhome/*.default)
#RAM directory 
local volatile="/tmp/firefox-$USER"
#My profile name
local link=${profile##*/}
local static=${link}.solid

#Changed to firefox home dir
cd "$firhome"

#First run of the day
[[ -d $volatile ]] || mkdir -m0700 "$volatile"
[[ -e $link ]] || { echo $link must exist!. ; return; }

#if not already soft linked
if [[ $(readlink $link) != $volatile ]]; then
    files=($link/*)
    #Move and make backup if not empty dir
    if (( ${#files[@]} > 1 )); then
        mv $link $static
        local cache=${HOME}/.cache/mozilla/firefox/
        [[ -d $cache ]] || mkdir -p "$cache"
        tar zcfp ${cache}/firefox_profile_backup.tar.gz $static
    fi
    ln -s $volatile $link
fi


if [[ -f $link/.unpacked ]]; then
    rsync -a --delete --exclude .unpacked ./$link/ ./$static/
else
    rsync -a ./$static/ ./$link/
    touch $link/.unpacked
fi
}

#Listen to several radios
function radios(){
[ "$1" = "xfm" ] && mplayer http://mediasrv-sov.musicradio.com/XFMLondon
[ "$1" = "virgin" ] && mplayer http://www.smgradio.com/core/audio/ogg/live.pls?service=vrbb
[ "$1" = "capital" ] && mplayer http://mediasrv-the.musicradio.com/CapitalRadio
[ "$1" = "bbcworld" ] && mplayer -playlist  http://bbc.co.uk/radio/worldservice/meta/tx/nb/live_infent_au_nb.asx
[ "$1" = "bbc1" ] && mplayer -playlist  http://bbc.co.uk/radio/listen/live/r1.asx
[ "$1" = "bbc1x" ] && mplayer -playlist  http://bbc.co.uk/radio/listen/live/r1x.asx
[ "$1" = "bbc2" ] && mplayer -softvol -softvol-max 200 -playlist  http://bbc.co.uk/radio/listen/live/r2.asx
[ "$1" = "bbc3" ] && mplayer -softvol -softvol-max 200 -playlist  http://bbc.co.uk/radio/listen/live/r3.asx
[ "$1" = "bbc4" ] && mplayer -playlist  http://bbc.co.uk/radio/listen/live/r4.asx
[ "$1" = "bbc5" ] && mplayer -playlist  http://bbc.co.uk/radio/listen/live/r5.asx
[ "$1" = "bbc6" ] && mplayer -playlist  http://bbc.co.uk/radio/listen/live/r6.asx
[ "$1" = "bbcman" ] && mplayer -playlist  http://bbc.co.uk/radio/listen/live/bbcmanchester.asx
[ "$1" = "vaughan" ] && mplayer http://server01.streaming-pro.com:8012 
[ "$1" = "radio3" ] && mplayer -cache 500 -playlist http://rtve.stream.flumotion.com/rtve/radio3.mp3.m3u
[ "$1" = "folk-eu" ] && mplayer http://www.live365.com/play/wumb919fast
[ "$1" = "folk" ] && mplayer -cache 500 -playlist http://public.wavepanel.net/3LACLKLS7UVKONE4/listen/m3u
# alias folkradio_graba='mplayer -cache 500 http://www.live365.com/play/wumb919fast -ao pcm:file=radio.wav -vo null -vc null'
#FRANCE
[ "$1" = "nrj" ] && mplayer mms://vipnrj.yacast.fr/encodernrj
[ "$1" = "rtl" ] && mplayer http://streaming.radio.rtl.fr/rtl-1-44-96
[ "$1" = "rtl2" ] && mplayer http://streaming.radio.rtl.fr/rtl2-1-44-96
[ "$1" = "europe2" ] && mplayer mms://vipmms9.yacast.fr/encodereurope2
[ "$1" = "fip" ] && mplayer http://viphttp.yacast.net/V4/radiofrance/fip_hd.m3u
[ "$1" = "franceculture" ] && mplayer http://viphttp.yacast.net/V4/radiofrance/franceculture_hd.m3u
[ "$1" = "franceinter" ] && mplayer http://viphttp.yacast.net/V4/radiofrance/franceculture_hd.m3u
[ "$1" = "lemouv" ] && mplayer http://viphttp.yacast.net/V4/radiofrance/lemouv_hd.m3u
echo "Posibles opciones: xfm virgin capital bbcworld bbc1 bbc1x bbc2 bbc3 bbc4 bbc5 bbc6 vaughan radio3 folk-eu folk rtl rtl2 nostalgie europe2 (broken links galore) "
}


